//------------// Introduction to Programming Using Java: An Object-Oriented Approach//	Arnow/Weiss//------------import java.io.*;import java.util.*;class Life {    public Life(LifeDisplay lifeDisplay, int size,                           double probabilityOfLife) {        this.lifeDisplay = lifeDisplay;        world = new boolean[size][size];        for (int i = 0; i < world.length; i++)           for (int j = 0; j < world[i].length; j++)               world[i][j] = Math.random()                                        <probabilityOfLife;    }    public void doGenerations() throws Exception {        lifeDisplay.displayWorld(world);        while (!lifeIsExtinct()) {           nextGeneration();           lifeDisplay.displayWorld(world);        }    }    private boolean lifeIsExtinct() {        for (int i = 0; i < world.length; i++)           for (int j = 0; j < world[i].length; j++)               if (world[i][j])                   return false;        return true;    }    private void nextGeneration() {        boolean[][]    newWorld =                    new boolean[world.length][world.length];        for (int i = 0; i < world.length; i++)           for (int j = 0; j < world[i].length; j++)               newWorld[i][j] = livingNeighbors(i, j) >=                                               MinNeighbors                                      &&                                  livingNeighbors(i, j) <=                                               MaxNeighbors;        world = newWorld;    }    private int livingNeighbors(int i, int j) {        int result = 0;        if (isAlive(i-1, j-1)) result++;        if (isAlive(i-1, j)) result++;        if (isAlive(i-1, j+1)) result++;        if (isAlive(i, j-1)) result++;        if (isAlive(i, j+1)) result++;        if (isAlive(i+1, j-1)) result++;        if (isAlive(i+1, j)) result++;        if (isAlive(i+1, j+1)) result++;        return result;    }    private boolean isAlive(int i, int j) {        if (i >= 0 && i < world.length &&               j >= 0 && j < world[i].length &&                                               world[i][j])           return true;        else           return false;    }    private boolean [][] world;   // Good for a two-dimensional world    private LifeDisplay lifeDisplay;    private static final int MinNeighbors = 2,                              MaxNeighbors = 3;}
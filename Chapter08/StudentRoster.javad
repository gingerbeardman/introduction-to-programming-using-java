//------------// Introduction to Programming Using Java: An Object-Oriented Approach//	Arnow/Weiss//------------//------------// Chapter 8 / Section 8.10 / Page 287//	The SongLibrary class using a Vector//------------ //------------// Notes//	- This class requires the Student class.//	- !!!! Differences from the code in the text !!!!//		An 'import java.util.*;' is required.//		The code in the text://			new InputReaderStream(//		should be://			new InputStreamReader(//			is missing a ')' before the ';'//		The function header for the constructor in the text//			is missing a 'throws Exception' clause.//		The statement://				student = Student.read(br);//			in the constructor is mistakenly duplicated.		//		The statement in the text (in the evaluate method): //				System.out.print(Student.getName());//			should be//				System.out.print(student.getName());//------------import java.io.*;import java.util.*;class StudentRoster {	StudentRoster(String rosterFileName) throws Exception {		studentColl = new Vector();		BufferedReader br =			new BufferedReader(				new InputStreamReader(					new FileInputStream(rosterFileName)));		int total = 0;		int count = 0;		Student student = Student.read(br);		while (student != null) {			total += student.getAverage();			count++;			studentColl.addElement(student);			student = Student.read(br);		}		classAverage = total / count;	}	void evaluate() {		Enumeration enum = studentColl.elements();		while (enum.hasMoreElements()) {			Student student = (Student)enum.nextElement();			System.out.print(student.getName());			System.out.print(" is performing ");			if (student.getAverage() >= classAverage)				System.out.println("above average");			else				System.out.println("below average");		}	}	Vector studentColl;	int classAverage;}
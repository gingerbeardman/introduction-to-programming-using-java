//------------// Introduction to Programming Using Java: An Object-Oriented Approach//	Arnow/Weiss//------------//------------// Chapter 8 / Section 8.11 / Page 298//	The Set class//------------ //------------// Notes//	- To compile, rename (or copy) the source file to SongLibrary.java//	- This class requires the Song class.//	- !!!! Differences from the code in the text !!!!//		The text is missing 'import java.io.*;' and //			'import java.util.*;'.//		In the print method, the invocation of the toString method//			should be followed by '()'//		For conistency, the 'clone' method in the final implementation//			should be called 'copy'//		The SetApplet in the GUI Supplement uses a method removeAllElements//			which is not presented in the Section 8.11 development of the//			Set class. This method is provided below (rather than//			supplying another Set class for the applet's use).//------------import java.io.*;import java.util.*;class Set {	public Set() {		vector = new Vector();	}	public boolean isEmpty() {		return vector.isEmpty();	}	public int size() {		return vector.size();	}	public boolean contains(Object o) {		Enumeration enum = vector.elements();		while (enum.hasMoreElements()) {			Object elem = enum.nextElement();			if (elem.equals(o))				return true;		}		return false;	}	public void addElement(Object o) {		if (!contains(o))			vector.addElement(o);	}	public Object copy() {		Set destSet = new Set();		Enumeration enum = vector.elements();		while (enum.hasMoreElements())			destSet.addElement(enum.nextElement());		return destSet;	}	public Set union(Set s) {		Set unionSet = (Set)s.copy();		Enumeration enum = vector.elements();		while (enum.hasMoreElements())			unionSet.addElement(enum.nextElement());		return unionSet;	}	public Set intersection(Set s) {		Set interSet = new Set();		Enumeration enum = this.vector.elements();		while (enum.hasMoreElements()) {			Object elem = enum.nextElement();			if (s.contains(elem))				interSet.addElement(elem);		}		return interSet;	}	void removeAllElements() {	    vector.removeAllElements();	}	Enumeration elements() {	    return vector.elements();	}	public void print(PrintStream ps) {   		Enumeration enum = vector.elements();		while (enum.hasMoreElements()) {			ps.print(enum.nextElement().toString());			ps.print(" ");		}	}	Vector vector;}